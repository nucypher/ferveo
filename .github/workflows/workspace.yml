name: Workspace

on:
  pull_request:
    paths-ignore:
      - README.md
  push:
    branches:
      - main
    paths-ignore:
      - README.md
    tags:
      - v*

env:
  CARGO_INCREMENTAL: 0
  # RUSTFLAGS: "-Dwarnings"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
          profile: minimal
      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - run: cargo clippy --all --all-features -- -D warnings
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  test:
    runs-on: ubuntu-latest
    needs: [ check ]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            rust: 1.63 # MSRV, `cargo msrv`
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - run: ${{ matrix.deps }}
      - run: cargo check --all-features
      - run: cargo test --release --all-features

  benchmark:
    runs-on: ubuntu-latest
    needs: [ test ]
    strategy:
      fail-fast: false
      matrix:
        component:
          - tpke
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: x86_64-unknown-linux-gnu
          override: true
      - uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      # The next steps have been adapted from https://raw.githubusercontent.com/unicode-org/icu4x/main/.github/workflows/build-test.yml

      # Benchmarking & dashboards job > Run benchmark.

      - name: Run benchmark
        run: |
          pushd $PWD && cd ${{ matrix.component }};
          export REL_OUTPUT_PATH="`dirs +1`/benchmarks/perf/${{ matrix.component }}";
          eval OUTPUT_PATH=$REL_OUTPUT_PATH;
          mkdir -p $OUTPUT_PATH;
          touch $OUTPUT_PATH/output.txt;
          cargo bench -- --output-format bencher | tee $OUTPUT_PATH/output.txt;
          echo "Saved output to $OUTPUT_PATH/output.txt";
          popd

        # In the following step(s) regarding converting benchmark output to dashboards, the branch in `gh-pages-branch` needs to exist.
        # If it doesn't already exist, it should be created by someone with push permissions, like so:
        #   # Create a local branch
        #   $ git checkout --orphan <newbranch>
        #   $ git commit --allow-empty -m "root commit"
        #   # Push it to create a remote branch
        #   $ git push origin <newbranch>:<newbranch>

        # Benchmarking & dashboards job > (unmerged PR only) Convert benchmark output into dashboard HTML in a commit of a branch of the local repo.

      - name: Store benchmark result & create dashboard (unmerged PR only)
        if: github.event_name == 'pull_request'
        uses: rhysd/github-action-benchmark@v1.15.0
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: ./benchmarks/perf/${{ matrix.component }}/output.txt
          benchmark-data-dir-path: ./benchmarks/perf/${{ matrix.component }}
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'  # If for nothing else, enabling the possibility of alerts with meaningful thresholds requires this job to be done per-component
          fail-on-alert: true
          gh-pages-branch: unmerged-pr-bench-data  # Requires one-time-only creation of this branch on remote repo.
          auto-push: false  # Do not store historical benchmark info of unfinished PRs. Commits seem to get made anyways, so make sure
          # that the branch in `gh-pages-branch` is different from the branch used for merges to main branch.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true

      # Benchmarking & dashboards job > (PR merge to main only) Convert benchmark output into dashboard HTML in a commit of a branch of the local repo.

      - name: Store benchmark result & create dashboard (merge to main only)
        # only merges to main (implies PR is finished and approved by this point)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'nucypher/ferveo'
        uses: rhysd/github-action-benchmark@v1.15.0
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: ./benchmarks/perf/${{ matrix.component }}/output.txt
          benchmark-data-dir-path: ./benchmarks/perf/${{ matrix.component }}
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'  # If for nothing else, enabling the possibility of alerts with meaningful thresholds requires this job to be done per-component
          fail-on-alert: true
          gh-pages-branch: merged-bench-data  # Requires one-time-only creation of this branch on remote repo.
          auto-push: true  # Use the branch at `gh-pages-branch` to store historical info of benchmark data.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          alert-comment-cc-users: '@piotr-roslaniec'